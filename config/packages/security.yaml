security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:

        app_user_provider:
            id: App\Security\TokenUserProvider

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
            custom_authenticators:
                - App\Security\TokenAuth
        main:
            stateless: true
            lazy: true
            provider: app_user_provider
            custom_authenticators:
                - App\Security\TokenAuth
            entry_point: App\Security\TokenAuth

            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route
        registration_and_login:
            pattern: ^/(register|login)
            security: false
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Brand routes
        - { path: ^/insertbrand, roles: IS_FULLY_AUTHENTICATED }
        - { path: ^/deletebrand, roles: ROLE_ADMIN }
        - { path: ^/listallbrands, roles: ROLE_ADMIN }
        # Car routes
        - { path: ^/insertcar, roles: IS_FULLY_AUTHENTICATED }
        - { path: ^/deletecar, roles: ROLE_ADMIN }
        - { path: ^/listallcars, roles: ROLE_ADMIN }
        # City routes
        - { path: ^/insertcity, roles: IS_FULLY_AUTHENTICATED }
        - { path: ^/deletecity, roles: ROLE_ADMIN }
        - { path: ^/listallcities, roles: IS_FULLY_AUTHENTICATED }
        - { path: ^/listallzipcodes, roles: IS_FULLY_AUTHENTICATED }
        # Student routes
        - { path: ^/insertstudent, roles: IS_FULLY_AUTHENTICATED }
        - { path: ^/updatestudent, roles: IS_FULLY_AUTHENTICATED }
        - { path: ^/deletestudent, roles: ROLE_ADMIN }
        - { path: ^/selectstudent, roles: IS_FULLY_AUTHENTICATED }
        - { path: ^/listallstudents, roles: ROLE_ADMIN }
        # Trip routes
        - { path: ^/inserttrip, roles: IS_FULLY_AUTHENTICATED }
        - { path: ^/searchtrip, roles: IS_FULLY_AUTHENTICATED }
        - { path: ^/listalltrips, roles: ROLE_ADMIN }
        - { path: ^/deletetrip, roles: ROLE_ADMIN }
        - { path: ^/insertparticipation, roles: IS_FULLY_AUTHENTICATED }
        - { path: ^/listallparticipations, roles: ROLE_ADMIN }
        - { path: ^/deleteparticipation, roles: IS_FULLY_AUTHENTICATED }
        - { path: ^/getdriverontrip, roles: IS_FULLY_AUTHENTICATED }
        - { path: ^/getstudentontrips, roles: IS_FULLY_AUTHENTICATED }
        # User routes
        - { path: ^/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
