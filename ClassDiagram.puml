@startuml
skinparam linetype ortho
top to bottom direction

title Architecture en Couches


package "Carpooling Controller" << BUSINESS LOGIC >> as controller {
abstract class AbstractController  {
}
class BrandController {
    +createBrand()
    +updateBrand()
    +deleteBrand()
    +getBrand()
    +getBrands()
}
class CarController {
    +createCar()
    +updateCar()
    +deleteCar()
    +getCar()
    +getCars()
}
class CityController {
    +createCity()
    +updateCity()
    +deleteCity()
    +getCity()
    +getCities()
}
class StudentController {
    +createStudent()
    +updateStudent()
    +deleteStudent()
    +getStudent()
    +getStudents()
}
class TripController {
    +createTrip()
    +updateTrip()
    +deleteTrip()
    +getTrip()
    +getTrips()
}
class UserController {
    +createUser()
    +updateUser()
    +deleteUser()
    +getUser()
    +getUsers()
}
AbstractController ^-down- BrandController
AbstractController ^-down- CarController
AbstractController ^-down- CityController
AbstractController ^-down- StudentController
AbstractController ^-down- TripController
AbstractController ^-down- UserController

}


package "Carpooling Model" <<CRUD OPERATIONS>> as model{
   class User {
       -id: int
       -login: string
       -roles: array
       -password: string
       -token: string
   }
  class Student {
      -id: int
      -firstname: string
      -name: string
      -phone: string
      -email: string
      -register: User
      -participate: Collection<Trip>
      -drive: Collection<Trip>
      -live: City
      -possess: Car
  }
  class Car {
      -id: int
      -carModel: string
      -matriculation: string
      -identify: Brand
      -numberPlaces: int
  }
 class Brand {
       -id: int
       -carBrand: string
       -cars: Collection<Car>
  }

  class Trip {
      -id: int
      -kmDistance: float
      -travelDate: DateTime
      -placesOffered: int
      -students: Collection<Student>
      -student: Student
      -startingTrip: City
      -arrivalTrip: City
  }
  class City {
           -id: int
           -name: string
           -zipCode: string
           -trips: Collection<Trip>
           -tripsArrival: Collection<Trip>
           -students: Collection<Student>
       }

  Student "0.1" - "1" User : register

  Student "many" -- "many" Trip : participate
  Student "1" -- "many" Trip : drive
  Car "0.1" -- "1" Student : possess


  Brand "1" -- "many" Car : identify

  City "1" -- "many" Trip : starting
  City "1" -- "many" Trip : arrival
  City "1" -- "many" Student : live


}
controller <.down. model
@enduml